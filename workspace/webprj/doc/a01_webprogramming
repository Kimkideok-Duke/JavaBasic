# 웹 프로그래밍 내용 계열화
1. 네트워크 환경에 대한 이해
    웹이란 무엇인가?
    ip란 무엇인가?
    웹에서 서버 클라이언트란 무엇인가?
        네트워크 환경에 ip/도메인을 활용하여 클라이언트(브라우저)가 서버(웹서버-톰캣)에 접근하여
        html 내용받아서 화면을 확인하는 것이 웹 서비스이다.
2. 웹서버 구축
    웹 프로젝트 생성
    tomcat 웹 서버 구축
        ip, port 저장 및 웹 프로젝트와 연동 처리
3. 웹프로그래밍 처리 방식에 대한 이래
    1) front단 프로그램 처리 방식
        html/css/js 코드 작성
        브라우저에서 확인
    2) back end 프로그래밍 처리 방식
        jsp 코드 작성
        변환된 html 확인
        백엔드 프로그램으로 DB연동, 자바프로그램으로 로직처리하여 최종결과인 html 코드를 client인 브라우저를 통해서 전달해주고,
        이 브라우저는 전달된 html코드를 파싱(해석)하여 화면에 출력하여 사용자로 하여금 보게 한다.
4. 웹 프로그램 코드 순서
    1) 웹 프로젝트 생성
    2) webapp 하위에 html/jsp 파일 생성
    3) 필요한 tag/js/css 처리
    4) java 코드 처리
    5) 웹 서버와 연동된 환경하에 실행 처리
    6) 결과 확인

5. 각 프로그래밍 별로 연동 처리하기
    1) 초기 화면 구성 : html
    2) html에서 확장된 색상/크기/위치지정 : css
    3) html/css를 함수를 통해서 동적인 병경 : javascript
    4) jsp : 위에 있는 html/css/javascript를 java코드와 함께 서버에서
        만들어서 client(브라우저)에 보내주는 역할을 한다.
    # 실제 각 프로그램 처리순서
    1) [was-서버단]jsp ==> java(servlet) ==> html/css/js 만들어 클라이언트에 전달
    2) [클라이언트단]
            html/css ==> 화면 구현
            html(태그) ==> DOM ==> js 처리(동적인 처리)

# 웹프로그램의 자원에 대한 접근
1. 상대주소 절대주소에 대한 이해
    1) 상대경로/절대경로
    2) 절대 주소 설정으로 모든 자원에 대한 접근 처리
        webapp하위를 기준 경로로 설정되고, 이것을 서버로 시작되었을 때.
        http://localhost:7080/프로젝트명/
    3) 공통 자원 접근 설정
        js/css/javascript/img
        webapp/com 폴더로
        webapp/img 폴더로
        다른소스를 접근할 때,
        String path = request.getContextPath()
        <%=path%> : 모든 프로그램에서 webapp하위에 접근할 수 있는 경로로 지정하기에
        <a href="<%=path%>/img/img01.jpg">
        <link href="<%=path%>/com/com01.css">
        <script src="<%=path%>/com/com.js">

2. link 처리에 대한 내용
    1) 절대주소/상대주소로 페이지 이동하기
    2) target 옵션에 대한 내용 처리
    3) frame을 통한 화면 처리
        - navigation bar에 대한 css 처리
        - frame에 대한 접근 처리와 메뉴 화면 구성
# 서버/client 프로그램
1. client(브라우저) <==> server(톰캣) - web application container
    1) 브라우저에 URL을 입력하면 (페이지)
        http://localhost:7080/webprj/a02_javascript/a01_basic.html
    2) [서버]해당하는 페이지를 client에 전송한다.(html)
        - html
            html(css, html태그, javascript)
        - jsp
            ==> servlet.java ==> response로 
                response.getWriter().priont("html태그"+java변수 객체)
                를 통해서 stream으로 최종적으로 html을 만들어서 브라우저에 전달.
    3) [클라이언트] html을 받아서 브라우저에서 랜더링
            태그는 각 기능에 맞게 화면에 보여주고, img 보여주고,
            javascript 함수를 선언한 상황에 이벤트 처리(클릭, 키보드 입력, 마우스 오버 등)
    4) [클라이언트] 서버로 받은 html 태그에서 form요소에서 데이터를 입력하고 
            type="submit" ==> 유효성check => type="button" onclick="send()"
            function send(){
                // 유효성 check..
                if(조건){
                    return; // 그 다음 라인 진행을 중지.
                }
                document.querySelector("form").submit();
            }
            form action="호출할페이지"있는 경우 호출할 페이지?key=value
            form 없는 경우 현재페이지?key=value
    5) [서버] 호출한 페이지(action속성)에서 받아서,
        query string으로 요청된 내용을 
            String 요청값을 받을 변수 = request.getParameter("요청key")
            DB 접속(DAO) 데이터 확인
                보여줄 페이지를 조건문으로 결정해서 다시 client에 전송
                성공 - main.jsp보여주기
                실패 - login.jsp보여주기
    6) [클라이언트] 위 조건에 따라 다른 페이지가 전달되어진다.

# html/css/javascript/jsp의 역할과 프로세스
1. [브라우저프로그램] html : 웹화면을 구성하는 기본태그를 선언한다. 태그는 브라우저에서 랜더링되어 화면에 표현한다.
2. [브라우저프로그램] css : html 기본태그로 지원하지 못하는 정렬, 크기, 동적인 처리등을
    선택자(태그, .클래스, #아이디명, 태그[속성=속성값]..){속성:속성값;속성2:속성2값;..}
    형식으로 확장하여 화면에 처리해준다.
3. [브라우저프로그램]javascript : 함수, 객체, 변수 설정으로 html/css의 태그를 동적으로 처리한다.
    DOM(태그를 객체로 인식해서 속성변경함으로 동적인 처리하는것을 말한다.)
        document.querySelector("태그")
        document.querySelectorAll("다수태그")
        .innerText, .innerHTML, .value
        속성 = 속성값, style.css속성 = css속성값
        .onclick=function(){ // 이벤트 처리..
        }
4. [was프로그램] jsp/java : client에서 호출되어진 페이지를 java+html을 
    활용(스크립트-scriptlet, expression)하여 최종적으로 html(태그,css,js)을 만들어서
    브라우저에 response로 전송한다.
    - 조건에 의해서 다른 페이지를 보여주거나, 반복문을 통해서 반복인 html태그를 처리해준다.
    - dao를 통해서 DB있는 데이터를 java+html를 통해서 화면에 출력한다.

# 웹프로그램 순서
0. 요구사항 확인 : 화면, 요청값, java단 처리
1. 출력할 html 코드 화면 구성
2. js에서 처리할 부분 처리
3. 자바 핵심 코드 구현<%%>
4. html이나, js에서 처리하는 script를 위치를 지정
5. 자바의 변수, 핵심 로직으로 script 안에 복사해 처리

# 주요 핵심키워드
1. html form 
    <input type="XXX" name="###" value="@@@"/> 
    <select>
        <option value="@@">@@@</option>    
    <textarea>
    <form action="@@" method="get/post">
        <input type="submit">
        <input type="button" onclick="함수()">
2. javascript
    var obj = document.querySelector("태그")
    var arry = document.querySelectorAll("태그")
    obj.innerText
    obj.innerHTML
    <input type="" value="">
    obj.value
    obj.align = "center"; // 태그의 기본 속성 <h1 align="">
    obj.src = "img01.jpg"; // 태그의 기본 속성 <img src="">
    obj.style.backgroundColor="red"
        // 태그의 inline style 속성 <h1 style="background-color:red;"
    document.querySelector("form").submit();
        // form type="submit" 클릭했을 때와 동일
    obj.onclick=function(){ 이벤트 처리 <h2 onclick="call()">
        this.style.backgroundColor="yellow";
    }
    if(){
        return;
    }

# 최고로 많이 나오는 에러

1. js
    기본적으로 동작을 하지 않을 때, f12으로 console부분을 확인해서
    에러내용을 확인한다. 해당 line을 확인하고,
    변경 저장 후, f5으로 브라우저를 refresh로 확인한다.

    Cannot type properties of null (reading 'value')
    DOM의 선택자 부분 확인
    데이터가 정상적으로 나오지 않을 속성을 혼동해서 처리
        priceObj.value
        priceObj.innerText

    0616.jsp:29 uncaught ReferenceError : Number is not defined
    내장 객체, 내장함수에 오기가 있는 경우

    0616.jsp:14 Incaught TypeError: document.querySelector is not ad function
    해당하는 키워드의 입력 오류

    Cannot read properies of null (reading 'value')
    해당 dom 선택자를 잘못 지정시..
        document.querySelector("선택자")
    
# 프로젝트 진행에 필요한 [고정 ip] 설정
1) 고정ip의 필요
    vpn
    사용할 서버에 실행 - 연결된 ip로 svn, 웹서버 DB 서버 처리가 가능하다.
    
2) svn 설정
    서버 : visual svn server 구글에 검색해서 설치 (server가 있는 pc)
    https://ip/svn/저장소
    https://desktop-bpp6jf4/svn/webprj01 prj_user01/1111

3) 웹서버 설정
4) DB서버설정

# 웹화면에서 Data처리하기
1. 개발 순서
    1) 어떤 기능과 화면을 가지고 처리를 할 건지를 요구사항 정의를 통해 정의하낟.
    2) 화면 설계
    3) 데이터 처리 sql 활용
        - 테이블 구성
        - sql 작성
    4) DAO 처리
        - 사용하게될 sql의 결과 처리할 VO클래스 만들기
        - DAO 생성
            - 공통기능 메서드 연결객체
            - 기능 메서드 - 처리할 기능
                - return, 매개변수 처리
                - 연결/대화객체/결과객체를 만들고, 예외 처리를 하고 이를 바탕으로 처리를 한다.
    5) 화면 구성(jsp)
        - 기본 html/css 구성
        - js 필요 내용 구성 (DOM객체 활용)
        - java 프로그램 처리
            - import
            - 스크립트 처리하기
                - 스크립트릿, 익스프레션 구성
                - 조건/반복문을 활용해서 해당 내용 처리
        - 기능 테스트 확인